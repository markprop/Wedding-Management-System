name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Wedding Management System
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        cd backend && npm install
        cd ../frontend && npm install
        
    - name: Build frontend
      run: |
        cd frontend && npm run build
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r backend deployment/
        cp -r frontend/build deployment/frontend
        cp package.json deployment/
        cp README.md deployment/
        cp LICENSE deployment/
        cp CONTRIBUTING.md deployment/
        
    - name: Create deployment script
      run: |
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        echo "ðŸš€ Deploying Wedding Management System..."
        
        # Install PM2 globally if not installed
        if ! command -v pm2 &> /dev/null; then
          npm install -g pm2
        fi
        
        # Install dependencies
        cd backend
        npm install --production
        
        # Start the application
        pm2 start server.js --name "wedding-management-system"
        pm2 save
        pm2 startup
        
        echo "âœ… Deployment completed successfully!"
        EOF
        chmod +x deployment/deploy.sh
        
    - name: Create Docker configuration
      run: |
        cat > deployment/Dockerfile << 'EOF'
        # Use Node.js LTS version
        FROM node:18-alpine
        
        # Set working directory
        WORKDIR /app
        
        # Copy package files
        COPY backend/package*.json ./
        
        # Install dependencies
        RUN npm ci --only=production
        
        # Copy backend code
        COPY backend/ ./
        
        # Copy frontend build
        COPY frontend/build ./public
        
        # Expose port
        EXPOSE 5000
        
        # Start the application
        CMD ["npm", "start"]
        EOF
        
        cat > deployment/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          wedding-app:
            build: .
            ports:
              - "5000:5000"
            environment:
              - NODE_ENV=production
              - MONGODB_URI=${MONGODB_URI}
              - MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}
            restart: unless-stopped
            
          nginx:
            image: nginx:alpine
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./nginx.conf:/etc/nginx/nginx.conf
            depends_on:
              - wedding-app
            restart: unless-stopped
        EOF
        
        cat > deployment/nginx.conf << 'EOF'
        events {
          worker_connections 1024;
        }
        
        http {
          upstream wedding_app {
            server wedding-app:5000;
          }
          
          server {
            listen 80;
            server_name localhost;
            
            location / {
              proxy_pass http://wedding_app;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /static/ {
              alias /app/public/;
              expires 1y;
              add_header Cache-Control "public, immutable";
            }
          }
        }
        EOF
        
    - name: Create environment template
      run: |
        cat > deployment/.env.example << 'EOF'
        # Database Configuration
        MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/wedding_planner?retryWrites=true&w=majority
        
        # Mapbox Configuration
        MAPBOX_ACCESS_TOKEN=your_mapbox_access_token
        
        # Server Configuration
        PORT=5000
        NODE_ENV=production
        
        # Security (Optional)
        JWT_SECRET=your_jwt_secret_key
        CORS_ORIGIN=https://yourdomain.com
        EOF
        
    - name: Create deployment documentation
      run: |
        cat > deployment/DEPLOYMENT.md << 'EOF'
        # Deployment Guide
        
        ## Prerequisites
        - Node.js 18+
        - MongoDB Atlas account
        - Mapbox account
        - Server with Docker (optional)
        
        ## Quick Start
        
        ### 1. Environment Setup
        ```bash
        cp .env.example .env
        # Edit .env with your configuration
        ```
        
        ### 2. Using PM2 (Recommended)
        ```bash
        chmod +x deploy.sh
        ./deploy.sh
        ```
        
        ### 3. Using Docker
        ```bash
        docker-compose up -d
        ```
        
        ### 4. Manual Deployment
        ```bash
        cd backend
        npm install --production
        npm start
        ```
        
        ## Configuration
        
        ### Environment Variables
        - `MONGODB_URI`: MongoDB connection string
        - `MAPBOX_ACCESS_TOKEN`: Mapbox API token
        - `PORT`: Server port (default: 5000)
        - `NODE_ENV`: Environment (production/development)
        
        ### Database Setup
        1. Create MongoDB Atlas cluster
        2. Get connection string
        3. Update MONGODB_URI in .env
        
        ### Mapbox Setup
        1. Create Mapbox account
        2. Get access token
        3. Update MAPBOX_ACCESS_TOKEN in .env
        
        ## Monitoring
        
        ### PM2 Commands
        ```bash
        pm2 status
        pm2 logs wedding-management-system
        pm2 restart wedding-management-system
        pm2 stop wedding-management-system
        ```
        
        ### Docker Commands
        ```bash
        docker-compose logs -f
        docker-compose restart
        docker-compose down
        ```
        
        ## Troubleshooting
        
        ### Common Issues
        1. **Port already in use**: Change PORT in .env
        2. **Database connection failed**: Check MONGODB_URI
        3. **Map not loading**: Verify MAPBOX_ACCESS_TOKEN
        4. **CORS errors**: Check CORS_ORIGIN setting
        
        ## Security
        
        - Use HTTPS in production
        - Set strong JWT secrets
        - Configure CORS properly
        - Use environment variables for secrets
        - Keep dependencies updated
        
        ## Backup
        
        ### Database Backup
        ```bash
        mongodump --uri="your_mongodb_uri" --out=backup/
        ```
        
        ### Application Backup
        ```bash
        tar -czf wedding-app-backup.tar.gz deployment/
        ```
        EOF
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: wedding-management-system-deployment
        path: deployment/
        retention-days: 30
        
    - name: Create release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## ðŸš€ Wedding Management System Release v${{ github.run_number }}
          
          ### What's New
          - Complete wedding management application
          - Professional documentation
          - Ready for production deployment
          
          ### Installation
          1. Download the deployment package
          2. Follow the DEPLOYMENT.md guide
          3. Configure environment variables
          4. Start the application
          
          ### Features
          - Guest Management
          - Expense Tracking
          - Food Planning
          - Pawo System
          - Location Management
          - Interactive Dashboard
          
          **Happy Wedding Planning! ðŸ’’âœ¨**
        draft: false
        prerelease: false
